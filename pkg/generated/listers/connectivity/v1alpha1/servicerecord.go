// Copyright (c) 2020 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vmware-tanzu/cross-cluster-connectivity/apis/connectivity/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceRecordLister helps list ServiceRecords.
// All objects returned here must be treated as read-only.
type ServiceRecordLister interface {
	// List lists all ServiceRecords in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceRecord, err error)
	// ServiceRecords returns an object that can list and get ServiceRecords.
	ServiceRecords(namespace string) ServiceRecordNamespaceLister
	ServiceRecordListerExpansion
}

// serviceRecordLister implements the ServiceRecordLister interface.
type serviceRecordLister struct {
	indexer cache.Indexer
}

// NewServiceRecordLister returns a new ServiceRecordLister.
func NewServiceRecordLister(indexer cache.Indexer) ServiceRecordLister {
	return &serviceRecordLister{indexer: indexer}
}

// List lists all ServiceRecords in the indexer.
func (s *serviceRecordLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceRecord, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceRecord))
	})
	return ret, err
}

// ServiceRecords returns an object that can list and get ServiceRecords.
func (s *serviceRecordLister) ServiceRecords(namespace string) ServiceRecordNamespaceLister {
	return serviceRecordNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceRecordNamespaceLister helps list and get ServiceRecords.
// All objects returned here must be treated as read-only.
type ServiceRecordNamespaceLister interface {
	// List lists all ServiceRecords in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceRecord, err error)
	// Get retrieves the ServiceRecord from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServiceRecord, error)
	ServiceRecordNamespaceListerExpansion
}

// serviceRecordNamespaceLister implements the ServiceRecordNamespaceLister
// interface.
type serviceRecordNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceRecords in the indexer for a given namespace.
func (s serviceRecordNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceRecord, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceRecord))
	})
	return ret, err
}

// Get retrieves the ServiceRecord from the indexer for a given namespace and name.
func (s serviceRecordNamespaceLister) Get(name string) (*v1alpha1.ServiceRecord, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicerecord"), name)
	}
	return obj.(*v1alpha1.ServiceRecord), nil
}
